<?php

 namespace Drupal\rep\Form;

 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\rep\ListDerivation;
 use Drupal\rep\ListUsage;
 use Drupal\rep\Utils;
 use Drupal\rep\Entity\Tables;
 use Drupal\rep\Vocabulary\REPGUI;
 use Drupal\rep\Vocabulary\VSTOI;


 class DescribeDerivationForm extends FormBase {

  protected $element;

  protected $source;

  protected $codebook;

  public function getElement() {
    return $this->element;
  }

  public function setElement($obj) {
    return $this->element = $obj; 
  }

  public function getSource() {
    return $this->source;
  }

  public function setSource($obj) {
    return $this->source = $obj; 
  }

  public function getCodebook() {
    return $this->codebook;
  }

  public function setCodebook($obj) {
    return $this->codebook = $obj; 
  }

  /**
   * {@inheritdoc}
   */
  public function getFormId() {
      return "describe_derivation_form";
  }

  /**
   * {@inheritdoc}
   */
  public function buildForm(array $form, FormStateInterface $form_state){

    // RETRIEVE PARAMETERS FROM HTML REQUEST
    $request = \Drupal::request();
    $pathInfo = $request->getPathInfo();
    $pathElements = (explode('/',$pathInfo));
    if (sizeof($pathElements) >= 4) {
      $elementuri = $pathElements[3];
    }

    // RETRIEVE REQUESTED ELEMENT
    $uri=base64_decode(rawurldecode($elementuri));
    $full_uri = Utils::plainUri($uri);
    $api = \Drupal::service('rep.api_connector');
    $this->setElement($api->parseObjectResponse($api->getUri($full_uri),'getUri'));
    if ($this->getElement() == NULL || $this->getElement() == "") {
      $hascoType = "";
      $manager = "NONE";
      $this->setSource(NULL); 
      $this->setCodebook(NULL); 
    } else {
      $hascoType = $this->getElement()->hascoTypeUri;
      $manager = $this->getElement()->hasSIRManagerEmail;
      if ($hascoType == VSTOI::DETECTOR) {
        if ($this->getElement()->wasDerivedFrom != NULL) {
            $this->setSource($api->parseObjectResponse($api->getUri($this->getElement()->wasDerivedFrom),'getUri'));
        }
        $generatedByUri = $this->getElement()->wasGeneratedBy;
    }
}

    // Instantiate tables 
    $tables = new Tables;
    $derivations = $tables->getGenerationActivities();

    // ROOT URL
    $root_url = \Drupal::request()->getBaseUrl();

    $form['header_provenance'] = [
      '#type' => 'item',
      '#title' => '<hr><h3>Provenance</h3>',
    ];

    $form['element_manager_email'] = [
        '#type' => 'item',
        '#title' => '<b>Manager Email</b>: ' . $manager,
    ];

    if (isset($this->getElement()->namedGraph)) {
      $form['named_graph'] = [
        '#type' => 'item',
        '#title' => '<b>Named Graph</b>: ' . $this->getElement()->namedGraph,
      ];
    }

  if ($hascoType == VSTOI::INSTRUMENT || $hascoType == VSTOI::DETECTOR) {

      $derivations = $tables->getGenerationActivities();
      if ($this->getSource() != NULL) {
        $sourceUri = Utils::namespaceUri($this->getSource()->uri);
        $form['element_source'] = [
          '#type' => 'item',
          '#title' => t('<b>Derived from</b>: <a href="'.$root_url.REPGUI::DESCRIBE_PAGE.base64_encode($sourceUri).'">' . $sourceUri . '</a> (' . $this->getSource()->hasContent . ') and ' . 
          'generated by [' . $derivations[$this->getElement()->wasGeneratedBy] . '].'),
        ];
      } else {
        if ($hascoType == VSTOI::DETECTOR) {
          $form['element_source'] = [
            '#type' => 'item',
            '#title' => t('<b>Generated by</b>: [' . $derivations[$this->getElement()->wasGeneratedBy] . ']'),
          ];
        }
      }

      $form['header_usage'] = [
          '#type' => 'item',
          '#title' => '<hr><h3>Usage</h3>',
      ];

      if ($hascoType == VSTOI::DETECTOR) {
          $usageElements = ListUsage::exec($this->getElement()->uri);
          $form['element_usage'] = [
              '#type' => 'item',
              '#title' => t(ListUsage::fromDetectorToHtml($usageElements)),
          ];
      } else {
          $form['element_usage'] = [
              '#type' => 'item',
              '#title' => 'NONE',
          ];
      }

      $form['header_derivation'] = [
          '#type' => 'item',
          '#title' => '<hr><h3>Derivation</h3>',
      ];

      if ($hascoType == VSTOI::DETECTOR) {
        $derivationElements = ListDerivation::exec($this->getElement()->uri);
        $form['element_derivation'] = [
            '#type' => 'item',
            '#title' => t(ListDerivation::fromDetectorToHtml($derivationElements)),
        ];
      } else {
        $form['element_derivation'] = [
            '#type' => 'item',
            '#title' => 'NONE',
        ];
      }
    }

    return $form;        

  }
  
  public function validateForm(array &$form, FormStateInterface $form_state) {
  }
    
  /**
   * {@inheritdoc}
   */
  public function submitForm(array &$form, FormStateInterface $form_state) {
  }

 }
(function ($, Drupal) {
    Drupal.behaviors.tree = {
        attach: function (context, settings) {
            const nodeUriMap = new Map();
            let nodeIdCounter = 0;

            // Event delegation for dynamically loading children
            $(document).on('click', '.node', function (event) {
                event.preventDefault(); // Prevent default action

                const $node = $(this);
                const nodeUri = $node.data('uri');

                let nodeId = $node.data('id');
                if (!nodeId) {
                    nodeId = `node-${nodeIdCounter++}`;
                    $node.data('id', nodeId);
                    nodeUriMap.set(nodeId, nodeUri); // Map nodeId to nodeUri
                }

                //const $childrenContainer = $(`#tree-container`);
                const $childrenContainer = $(`#children-${nodeId}`);

                console.log('Node URI:', nodeUri);
                console.log('Node ID:', nodeId);
                console.log('Children Container:', $childrenContainer);
                console.log('Node URI Map:', nodeUriMap);

                // Load children only if not already loaded
                if ($childrenContainer.children().length === 0) {
                    $.ajax({
                        url: 'http://localhost/rep/getchildren',
                        type: 'GET',
                        data: { nodeUri: nodeUri },
                        dataType: 'json',
                        success: function (data) {
                            console.log('AJAX Success:', data);
                            if (Array.isArray(data) && data.length > 0) {
                                console.log(renderTreeNodes(data));
                                $childrenContainer.html(renderTreeNodes(data));
                            } else {
                                $childrenContainer.html('<p>No children available.</p>');
                            }
                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                            console.error('Failed to fetch data:', textStatus, errorThrown);
                        }
                    });
                }
            });

            function renderTreeNodes(nodes) {
                return '<ul>' + nodes.map(renderNode).join('') + '</ul>';
            }

            function renderNode(node) {
                const nodeId = `node-${nodeIdCounter++}`;
                nodeUriMap.set(nodeId, node.uri);

                let nodeHtml = '<li>';
                nodeHtml += `<span class="node" data-id="${nodeId}" data-uri="${node.uri}">${node.label || node.name}</span>`;
                nodeHtml += '<div class="children" id="children-' + nodeId + '">';
                if (node.children && node.children.length > 0) {
                    nodeHtml += renderTreeNodes(node.children);
                }
                nodeHtml += '</div>';
                nodeHtml += '</li>';
                return nodeHtml;
            }
        }
    };
})(jQuery, Drupal);
